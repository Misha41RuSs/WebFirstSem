// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤
const { useState, useEffect } = React;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function Calculator() {
    const [mode, setMode] = useState('derivative'); // 'derivative' –∏–ª–∏ 'integral'
    const [input, setInput] = useState('');
    const [result, setResult] = useState('');
    const [steps, setSteps] = useState([]);

    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
    const derivatives = {
        'x': '1',
        'x^2': '2x',
        'x^3': '3x^2',
        'x^n': 'nx^{n-1}',
        'sin(x)': 'cos(x)',
        'cos(x)': '-sin(x)',
        'e^x': 'e^x',
        'ln(x)': '\\frac{1}{x}',
        'tan(x)': '\\frac{1}{cos^2(x)}',
        'sqrt(x)': '\\frac{1}{2\\sqrt{x}}'
    };

    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const integrals = {
        '1': 'x + C',
        'x': '\\frac{x^2}{2} + C',
        'x^2': '\\frac{x^3}{3} + C',
        'x^3': '\\frac{x^4}{4} + C',
        'sin(x)': '-cos(x) + C',
        'cos(x)': 'sin(x) + C',
        'e^x': 'e^x + C',
        '1/x': 'ln|x| + C'
    };

    const calculate = () => {
        const normalizedInput = input.trim();
        
        if (mode === 'derivative') {
            if (derivatives[normalizedInput]) {
                setResult(derivatives[normalizedInput]);
                setSteps([
                    '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—á–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π',
                    `–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç ${normalizedInput} —Ä–∞–≤–Ω–∞ ${derivatives[normalizedInput]}`
                ]);
            } else {
                setResult('–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ');
                setSteps(['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: x, x^2, x^3, sin(x), cos(x), e^x, ln(x)']);
            }
        } else {
            if (integrals[normalizedInput]) {
                setResult(integrals[normalizedInput]);
                setSteps([
                    '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—á–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞',
                    `–ò–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç ${normalizedInput} —Ä–∞–≤–µ–Ω ${integrals[normalizedInput]}`
                ]);
            } else {
                setResult('–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ');
                setSteps(['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 1, x, x^2, x^3, sin(x), cos(x), e^x, 1/x']);
            }
        }
    };

    const examples = mode === 'derivative' 
        ? ['x', 'x^2', 'sin(x)', 'cos(x)', 'e^x']
        : ['1', 'x', 'x^2', 'sin(x)', 'cos(x)', 'e^x'];

    return (
        <div className="calculator-container">
            <h2>üßÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h2>
            
            <div className="calc-mode-switch">
                <button 
                    className={`calc-mode-btn ${mode === 'derivative' ? 'active' : ''}`}
                    onClick={() => setMode('derivative')}
                >
                    üìà –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
                </button>
                <button 
                    className={`calc-mode-btn ${mode === 'integral' ? 'active' : ''}`}
                    onClick={() => setMode('integral')}
                >
                    ‚à´ –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã
                </button>
            </div>

            <div className="calc-input-section">
                <label>
                    {mode === 'derivative' ? '–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è:' : '–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:'}
                </label>
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é..."
                    className="calc-input"
                    onKeyPress={(e) => e.key === 'Enter' && calculate()}
                />
            </div>

            <div className="calc-examples">
                <span>–ü—Ä–∏–º–µ—Ä—ã: </span>
                {examples.map((ex, idx) => (
                    <button
                        key={idx}
                        className="example-btn"
                        onClick={() => setInput(ex)}
                    >
                        {ex}
                    </button>
                ))}
            </div>

            <button className="calc-button" onClick={calculate}>
                –í—ã—á–∏—Å–ª–∏—Ç—å
            </button>

            {result && (
                <div className="calc-result">
                    <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                    <div className="result-formula">
                        <MathFormula latex={result} />
                    </div>
                    
                    {steps.length > 0 && (
                        <div className="calc-steps">
                            <h4>–®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è:</h4>
                            <ol>
                                {steps.map((step, idx) => (
                                    <li key={idx}>{step}</li>
                                ))}
                            </ol>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
function GraphVisualizer() {
    const [func, setFunc] = useState('sin');
    const canvasRef = React.useRef(null);

    const functions = {
        'sin': { name: 'sin(x)', func: Math.sin },
        'cos': { name: 'cos(x)', func: Math.cos },
        'tan': { name: 'tan(x)', func: Math.tan },
        'x': { name: 'x', func: (x) => x },
        'x2': { name: 'x¬≤', func: (x) => x * x },
        'x3': { name: 'x¬≥', func: (x) => x * x * x },
        'exp': { name: 'eÀ£', func: Math.exp },
        'sqrt': { name: '‚àöx', func: Math.sqrt }
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const width = canvas.width;
        const height = canvas.height;

        // –û—á–∏—Å—Ç–∫–∞
        ctx.clearRect(0, 0, width, height);
        
        // –§–æ–Ω
        ctx.fillStyle = '#f8f9fa';
        ctx.fillRect(0, 0, width, height);

        // –°–µ—Ç–∫–∞
        ctx.strokeStyle = '#dee2e6';
        ctx.lineWidth = 1;
        for (let i = 0; i < width; i += 40) {
            ctx.beginPath();
            ctx.moveTo(i, 0);
            ctx.lineTo(i, height);
            ctx.stroke();
        }
        for (let i = 0; i < height; i += 40) {
            ctx.beginPath();
            ctx.moveTo(0, i);
            ctx.lineTo(width, i);
            ctx.stroke();
        }

        // –û—Å–∏
        ctx.strokeStyle = '#495057';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(0, height / 2);
        ctx.lineTo(width, height / 2);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(width / 2, 0);
        ctx.lineTo(width / 2, height);
        ctx.stroke();

        // –ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        ctx.strokeStyle = '#3498db';
        ctx.lineWidth = 3;
        ctx.beginPath();

        const scale = 40;
        const centerX = width / 2;
        const centerY = height / 2;

        for (let px = 0; px < width; px++) {
            const x = (px - centerX) / scale;
            let y;
            
            try {
                y = functions[func].func(x);
                if (!isFinite(y)) continue;
            } catch {
                continue;
            }

            const py = centerY - y * scale;
            
            if (px === 0) {
                ctx.moveTo(px, py);
            } else {
                ctx.lineTo(px, py);
            }
        }

        ctx.stroke();

    }, [func]);

    return (
        <div className="graph-container">
            <h2>üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤</h2>
            
            <div className="graph-selector">
                {Object.entries(functions).map(([key, { name }]) => (
                    <button
                        key={key}
                        className={`graph-btn ${func === key ? 'active' : ''}`}
                        onClick={() => setFunc(key)}
                    >
                        {name}
                    </button>
                ))}
            </div>

            <canvas
                ref={canvasRef}
                width={600}
                height={400}
                className="graph-canvas"
            />
            
            <div className="graph-info">
                <p>–¢–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: <strong>f(x) = {functions[func].name}</strong></p>
                <p className="graph-hint">–ú–∞—Å—à—Ç–∞–±: 1 –∫–ª–µ—Ç–∫–∞ = 1 –µ–¥–∏–Ω–∏—Ü–∞</p>
            </div>
        </div>
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function Statistics() {
    const [stats, setStats] = useState({
        totalTests: 0,
        totalQuestions: 0,
        correctAnswers: 0,
        accuracy: 0
    });
    const [testHistory, setTestHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        loadStatistics();
        loadTestHistory();
    }, []);

    const loadStatistics = async () => {
        try {
            setLoading(true);
            setError(null);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            if (!window.StatisticsService) {
                throw new Error('–°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
            const data = await window.StatisticsService.getUserStatistics();
            setStats(data);
        } catch (err) {
            console.error('Failed to load statistics:', err);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
            if (err.message.includes('Failed to fetch')) {
                errorMessage = '–ë—ç–∫–µ–Ω–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Spring Boot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080.';
            } else if (err.message.includes('401') || err.message.includes('403')) {
                errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.';
            } else if (err.message.includes('404')) {
                errorMessage = 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–µ–Ω–¥–∞.';
            } else if (err.message.includes('500')) {
                errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Spring Boot.';
            }
            
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const loadTestHistory = async () => {
        try {
            if (!window.StatisticsService) return;
            
            const history = await window.StatisticsService.getTestHistory();
            setTestHistory(history || []);
        } catch (err) {
            console.error('Failed to load test history:', err);
            setTestHistory([]);
        }
    };

    const accuracy = stats.accuracy || 0;

    const achievements = [
        { id: 1, name: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç', desc: '–ü—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç', condition: stats.totalTests >= 1, icon: 'üéØ' },
        { id: 2, name: '–û—Ç–ª–∏—á–Ω–∏–∫', desc: '80%+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', condition: accuracy >= 80, icon: 'üèÜ' },
        { id: 3, name: '–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', desc: '–ü—Ä–æ–π—Ç–∏ 5 —Ç–µ—Å—Ç–æ–≤', condition: stats.totalTests >= 5, icon: 'üí™' },
        { id: 4, name: '–≠–∫—Å–ø–µ—Ä—Ç', desc: '–ü—Ä–æ–π—Ç–∏ 10 —Ç–µ—Å—Ç–æ–≤', condition: stats.totalTests >= 10, icon: 'üéì' },
        { id: 5, name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç', desc: '100% –≤ –ª—é–±–æ–º —Ç–µ—Å—Ç–µ', condition: testHistory.some(t => t.percentage === 100), icon: '‚≠ê' }
    ];

    if (loading) {
        return (
            <div className="stats-container">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                <div className="loading-spinner" style={{ textAlign: 'center', padding: '2em' }}>
                    ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="stats-container">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                <div className="error-message" style={{ textAlign: 'center', padding: '2em', color: '#ef4444' }}>
                    {error}
                </div>
                <button onClick={loadStatistics} className="btn-retry">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        );
    }

    return (
        <div className="stats-container">
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
            
            <div className="stats-grid">
                <div className="stat-card">
                    <div className="stat-icon">üéØ</div>
                    <div className="stat-value">{stats.totalTests}</div>
                    <div className="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤</div>
                </div>
                
                <div className="stat-card">
                    <div className="stat-icon">‚ùì</div>
                    <div className="stat-value">{stats.totalQuestions}</div>
                    <div className="stat-label">–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
                </div>
                
                <div className="stat-card">
                    <div className="stat-icon">‚úÖ</div>
                    <div className="stat-value">{stats.correctAnswers}</div>
                    <div className="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</div>
                </div>
                
                <div className="stat-card">
                    <div className="stat-icon">üìà</div>
                    <div className="stat-value">{accuracy.toFixed(1)}%</div>
                    <div className="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                </div>
            </div>

            <div className="achievements-section">
                <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                <div className="achievements-grid">
                    {achievements.map(ach => (
                        <div 
                            key={ach.id} 
                            className={`achievement ${ach.condition ? 'unlocked' : 'locked'}`}
                        >
                            <div className="ach-icon">{ach.icon}</div>
                            <div className="ach-name">{ach.name}</div>
                            <div className="ach-desc">{ach.desc}</div>
                            {ach.condition && <div className="ach-badge">‚úì</div>}
                        </div>
                    ))}
                </div>
            </div>

            <div className="best-scores">
                <h3>üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤</h3>
                {testHistory.length > 0 ? (
                    <div className="scores-list">
                        {testHistory.slice(0, 10).map((result, index) => (
                            <div key={result.id || index} className="score-item">
                                <span className="score-test">{result.testName}</span>
                                <span className="score-value">{result.percentage}%</span>
                                <span className="score-date">
                                    {new Date(result.completedAt).toLocaleDateString('ru-RU')}
                                </span>
                            </div>
                        ))}
                    </div>
                ) : (
                    <p className="no-scores">–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</p>
                )}
            </div>

            <button onClick={() => { loadStatistics(); loadTestHistory(); }} className="btn-refresh-stats">
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </button>
        </div>
    );
}

